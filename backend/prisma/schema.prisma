// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SUPERADMIN
}

enum TransactionStatus {
  BORROWED
  RETURNED
  OVERDUE
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique()
  phoneNumber String        @unique()
  address     String
  role        Role          @default(ADMIN)
  password    String
  createdAt   DateTime      @default(now())
  Member      Member[]
  Book        Book[]
  Transaction Transaction[]
}

model Member {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  name        String
  email       String
  phoneNumber String
  address     String
  createdAt   DateTime      @default(now())
  Transaction Transaction[]
}

model Book {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  author      String
  title       String
  totalCopies Int
  available   Int
  createdAt   DateTime      @default(now())
  Transaction Transaction[]
}

model Transaction {
  id         Int               @id @default(autoincrement())
  bookId     Int
  book       Book              @relation(fields: [bookId], references: [id])
  memberId   Int
  member     Member            @relation(fields: [memberId], references: [id])
  userId     Int
  user       User              @relation(fields: [userId], references: [id])
  status     TransactionStatus @default(BORROWED)
  returnDate DateTime?
  createdAt  DateTime          @default(now())
}
